#!/usr/bin/env python3
"""
Fix evolvegcn_go_interface.py - Remove all non-ASCII characters
This tool will replace all Chinese characters and special Unicode characters
with ASCII-compatible markers to ensure BlockEmulator Go program can call it
"""

import re

def fix_evolvegcn_interface():
    """Fix evolvegcn_go_interface.py encoding issues"""
    
    file_path = "evolvegcn_go_interface.py"
    
    print(f"[FIX] Processing {file_path}...")
    
    # Read the file
    with open(file_path, 'r', encoding='utf-8') as f:
        content = f.read()
    
    # Define replacement mappings
    replacements = [
        # Common Chinese characters and phrases
        ('Êé•Âè£', '[INTERFACE]'),
        ('Á®ãÂ∫èÈÄöËøáÊ≠§ËÑöÊú¨Ë∞ÉÁî®', 'program calls through this script'),
        ('ÁÆóÊ≥ï', 'algorithm'),
        ('ËæìÂÖ•', 'Input'),
        ('Ê†ºÂºèÁöÑËäÇÁÇπÁâπÂæÅÂíå‰∫§ÊòìÂõæ', 'format node features and transaction graph'),
        ('ËæìÂá∫', 'Output'),
        ('Ê†ºÂºèÁöÑÂàÜÁâáÁªìÊûú', 'format sharding results'),
        
        # Comment markers
        ('ÈÖçÁΩÆË∑ØÂæÑ', 'Configure paths'),
        ('ÂØºÂÖ•ÂõõÊ≠•È™§ÊµÅÊ∞¥Á∫ø', 'Import four-step pipeline'),
        ('ÂØºÂÖ•Â§±Ë¥•Ôºå‰ΩøÁî®Êõø‰ª£ÊñπÊ°à', 'Import failed, using fallback'),
        ('Ëß£ÊûêÂëΩ‰ª§Ë°åÂèÇÊï∞', 'Parse command line arguments'),
        ('ËØªÂèñËæìÂÖ•Êï∞ÊçÆ', 'Read input data'),
        ('Êï∞ÊçÆÈ™åËØÅ', 'Data validation'),
        ('ËäÇÁÇπÁâπÂæÅ', 'node_features'),
        ('‰∫§ÊòìÂõæ', 'transaction_graph'),
        
        # Process descriptions
        ('Â§ÑÁêÜËæìÂÖ•Êï∞ÊçÆ', 'Process input data'),
        ('ËøêË°åÂõõÊ≠•È™§ÊµÅÊ∞¥Á∫ø', 'Run four-step pipeline'),
        ('Ê†ºÂºèÂåñËæìÂá∫ÁªìÊûú', 'Format output results'),
        ('‰øùÂ≠òÁªìÊûúÂà∞Êñá‰ª∂', 'Save results to file'),
        
        # Error and status messages
        ('ÊàêÂäü', 'SUCCESS'),
        ('Â§±Ë¥•', 'FAILED'),
        ('ÈîôËØØ', 'ERROR'),
        ('Ë≠¶Âëä', 'WARNING'),
        ('ÂºÄÂßã', 'START'),
        ('ÂÆåÊàê', 'COMPLETE'),
        ('Â§ÑÁêÜ‰∏≠', 'PROCESSING'),
        
        # Technical terms
        ('ÂàÜÁâá', 'shard'),
        ('ËäÇÁÇπ', 'node'),
        ('ÁâπÂæÅ', 'feature'),
        ('ÁªìÊûú', 'result'),
        ('Êï∞ÊçÆ', 'data'),
        ('Êñá‰ª∂', 'file'),
        
        # Any remaining Chinese characters
        (r'[\u4e00-\u9fff]+', '[CHINESE_CHAR]'),
        
        # Special Unicode characters that might cause issues
        ('üîÑ', '[LOOP]'),
        ('‚úÖ', '[SUCCESS]'),
        ('‚ùå', '[ERROR]'),
        ('‚ö†Ô∏è', '[WARNING]'),
        ('üìä', '[DATA]'),
        ('üîß', '[CONFIG]'),
        ('üöÄ', '[START]'),
        ('üìÅ', '[FILE]'),
        ('üéØ', '[TARGET]'),
        ('üîó', '[LINK]'),
        ('üß†', '[AI]'),
        
        # Arrow and other symbols
        ('‚Üí', '->'),
        ('‚Üê', '<-'),
        ('‚Üî', '<->'),
        ('‚áÑ', '<->'),
        ('‚ü®', '<'),
        ('‚ü©', '>'),
    ]
    
    # Apply replacements
    for old, new in replacements:
        if old.startswith(r'['):  # Regex pattern
            content = re.sub(old, new, content)
        else:
            content = content.replace(old, new)
    
    # Additional cleanup for any missed non-ASCII characters
    def replace_non_ascii(match):
        char = match.group(0)
        return f'[U+{ord(char):04X}]'
    
    # Replace any remaining non-ASCII characters
    content = re.sub(r'[^\x00-\x7F]', replace_non_ascii, content)
    
    # Write back the fixed content
    with open(file_path, 'w', encoding='utf-8') as f:
        f.write(content)
    
    print(f"[SUCCESS] Fixed {file_path}")
    
    # Count lines and verify
    lines = content.split('\n')
    print(f"  Total lines: {len(lines)}")
    print(f"  File size: {len(content)} characters")
    
    # Check for any remaining problematic characters
    problematic = re.findall(r'[^\x00-\x7F]', content)
    if problematic:
        print(f"[WARNING] Found {len(problematic)} non-ASCII characters still remaining")
        unique_chars = set(problematic)
        for char in unique_chars:
            print(f"  U+{ord(char):04X}: {char}")
    else:
        print("[SUCCESS] All characters are now ASCII-compatible")

if __name__ == "__main__":
    fix_evolvegcn_interface()
