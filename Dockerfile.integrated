# 轻量化BlockEmulator + EvolveGCN集成镜像
# 多阶段构建：构建阶段 + 运行阶段
# 目标：从6GB减少到1.5GB以下

# ===============================
# 阶段1: Python依赖构建
# ===============================
FROM python:3.9-slim as python-builder

# 安装构建工具
RUN apt-get update && apt-get install -y --no-install-recommends \
    gcc g++ libc6-dev \
    && rm -rf /var/lib/apt/lists/*

# 创建虚拟环境
RUN python -m venv /opt/venv
ENV PATH="/opt/venv/bin:$PATH"

# 安装轻量化Python依赖 (CPU版本)
RUN pip install --no-cache-dir --index-url https://download.pytorch.org/whl/cpu \
    torch==1.13.1+cpu \
    && pip install --no-cache-dir \
    numpy==1.24.3 \
    scipy==1.10.1 \
    scikit-learn==1.2.2 \
    pandas==2.0.3 \
    networkx==3.1 \
    tqdm==4.65.0 \
    matplotlib==3.7.1 \
    seaborn==0.12.2 \
    psutil==5.9.5

# ===============================  
# 阶段2: Go程序编译 (如果需要)
# ===============================
FROM golang:1.19-alpine as go-builder

WORKDIR /build
# 这里可以复制Go源码进行编译
# COPY go.mod go.sum ./
# COPY . .
# RUN go build -o blockEmulator_linux_Precompile main.go

# ===============================
# 阶段3: 最终运行镜像
# ===============================
FROM ubuntu:22.04

# 基础系统配置  
RUN apt-get update && apt-get install -y --no-install-recommends \
    ca-certificates \
    tzdata \
    python3 \
    python3-pip \
    && ln -s /usr/bin/python3 /usr/bin/python \
    && rm -rf /var/lib/apt/lists/*

# 设置时区
ENV TZ=Asia/Shanghai

# 创建应用用户
RUN groupadd -g 1001 appgroup && \
    useradd -u 1001 -ms /bin/bash -g appgroup appuser

# 设置工作目录
WORKDIR /app

# 从构建阶段复制Python环境并重新安装包到系统Python路径
COPY --from=python-builder /opt/venv /opt/venv

# 重新安装关键包到系统Python（保持轻量化）
RUN pip3 install --no-cache-dir --index-url https://download.pytorch.org/whl/cpu \
    torch==1.13.1+cpu \
    && pip3 install --no-cache-dir \
    numpy==1.24.3 \
    pandas==2.0.3 \
    scikit-learn==1.2.2 \
    networkx==3.1 \
    tqdm==4.65.0

ENV PYTHONPATH="/app"

# 复制Go可执行文件
COPY ./docker/Files/blockEmulator_linux_Precompile ./blockEmulator
# 从go-builder阶段复制 (如果需要现场编译)
# COPY --from=go-builder /build/blockEmulator_linux_Precompile ./blockEmulator

# 复制必要的配置文件
COPY ./docker/Files/paramsConfig.json ./paramsConfig.json
COPY ./docker/Files/ipTable.json ./ipTable.json
COPY ./docker/Files/broker ./broker

# 复制Python分片系统 (选择性复制，减少镜像大小)
COPY partition/ ./partition/
COPY muti_scale/ ./muti_scale/
COPY evolve_GCN/ ./evolve_GCN/
COPY feedback/ ./feedback/

# 复制核心集成文件
COPY docker/evolvegcn_go_interface.py ./
COPY docker/integrated_four_step_pipeline.py ./
COPY blockchain_interface.py ./
COPY blockemulator_integration_interface.py ./
COPY config_python_venv.py ./

# 在容器中预置Python配置文件，指向虚拟环境 (覆盖原配置)
RUN echo '{"python_path": "/opt/venv/bin/python", "enable_evolve_gcn": true, "enable_feedback": true}' > /app/python_config.json

# 创建必要目录
RUN mkdir -p data_exchange outputs expTest && \
    chown -R appuser:appgroup /app && \
    chmod +x /app/blockEmulator

# 切换到非特权用户
USER appuser

# 健康检查
HEALTHCHECK --interval=30s --timeout=10s --start-period=5s --retries=3 \
    CMD pgrep -f blockEmulator || exit 1

# 启动命令 (支持EvolveGCN集成)
ENTRYPOINT ["./blockEmulator"]
